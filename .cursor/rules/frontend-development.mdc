# Frontend Development Guidelines

## Next.js 14 App Router Structure

Follow the structure in [frontend/src/app/](mdc:frontend/src/app/):

- Use the app router with page.tsx files in each route directory
- Implement proper layouts with [frontend/src/app/layout.tsx](mdc:frontend/src/app/layout.tsx)
- Use 'use client' directive for client-side components

## Component Architecture

### UI Components

Use shadcn/ui components from [frontend/src/components/ui/](mdc:frontend/src/components/ui/) for consistent design:

- Import from `@/components/ui/` for reusable components
- Follow the established component patterns with proper TypeScript interfaces
- Use `cn()` utility from [frontend/src/lib/utils.ts](mdc:frontend/src/lib/utils.ts) for conditional classes

### Shared Components

DApp-specific components in [frontend/src/components/shared/](mdc:frontend/src/components/shared/):

- Follow the naming convention: `component-name.tsx`
- Use proper TypeScript interfaces for props
- Implement proper error handling and loading states

## Web3 Integration

### Contract Integration

- Use the contract configuration from [frontend/src/contracts/ballot.contract.ts](mdc:frontend/src/contracts/ballot.contract.ts)
- Follow the pattern in [frontend/src/hooks/useContract.ts](mdc:frontend/src/hooks/useContract.ts) for transaction handling
- Always handle connection states and transaction statuses

### Wagmi Configuration

- Configure chains and connectors in [frontend/src/lib/wagmi.config.ts](mdc:frontend/src/lib/wagmi.config.ts)
- Use environment variables for API keys and endpoints
- Support multiple chains: Hardhat (local), Polygon zkEVM Cardona (testnet), Polygon zkEVM (mainnet)

### Provider Setup

The Web3Provider in [frontend/src/contexts/web3-provider.tsx](mdc:frontend/src/contexts/web3-provider.tsx) wraps:

- WagmiProvider for blockchain interactions
- QueryClientProvider for React Query
- ConnectKitProvider for wallet connections

## Styling

- Use Tailwind CSS with the configuration in [frontend/tailwind.config.ts](mdc:frontend/tailwind.config.ts)
- Follow the design system with CSS variables for theming
- Use the theme provider from [frontend/src/contexts/theme-provider.tsx](mdc:frontend/src/contexts/theme-provider.tsx)

## Development Commands

From [frontend/package.json](mdc:frontend/package.json):

- `pnpm dev` - Start development server
- `pnpm build` - Build for production
- `pnpm lint` - Run linting checks
- `pnpm cspell` - Run spell checking

## Best Practices

1. **TypeScript**: Use strict TypeScript with proper interfaces
2. **Error Handling**: Implement proper error boundaries and user feedback
3. **Loading States**: Show loading indicators for async operations
4. **Responsive Design**: Ensure components work on all screen sizes
5. **Accessibility**: Follow WCAG guidelines and use semantic HTML
   description:
   globs:
   alwaysApply: false

---
